// 聊天框组件
document.addEventListener('DOMContentLoaded', function() {
    // 如果已经加载过聊天框，则不再重复加载
    if (document.getElementById('chat-container')) {
        return;
    }
    
    // 创建聊天框HTML结构
    const chatHtml = `
    <div id="chat-container" class="chat-container">
        <div class="chat-header">
            <div class="chat-title">Live Chat</div>
            <div class="chat-controls">
                <button id="chat-minimize" class="chat-control-btn">—</button>
                <button id="chat-close" class="chat-control-btn">×</button>
            </div>
        </div>
        <div id="chat-body" class="chat-body">
            <div id="chat-messages" class="chat-messages">
                <div class="chat-message system-message">
                    <div class="message-content">Welcome to the game chat! Feel free to share your questions or thoughts here.</div>
                </div>
            </div>
            <div class="chat-input-area">
                <input type="text" id="chat-input" class="chat-input" placeholder="Type a message..." maxlength="100">
                <button id="chat-send" class="chat-send">Send</button>
            </div>
        </div>
    </div>
    `;
    
    // 创建CSS样式
    const chatStyles = `
    .chat-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 300px;
        height: 400px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        z-index: 1000;
        overflow: hidden;
        transition: all 0.3s ease;
    }
    
    .chat-container.minimized {
        height: 40px;
    }
    
    .chat-container.closed {
        transform: translateY(calc(100% + 20px));
    }
    
    .chat-header {
        background-color: #4FC3F7;
        color: white;
        padding: 10px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        cursor: pointer;
    }
    
    .chat-title {
        font-weight: bold;
    }
    
    .chat-controls {
        display: flex;
    }
    
    .chat-control-btn {
        background: none;
        border: none;
        color: white;
        margin-left: 5px;
        cursor: pointer;
        font-size: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
    }
    
    .chat-body {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }
    
    .chat-container.minimized .chat-body {
        display: none;
    }
    
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
    }
    
    .chat-message {
        margin-bottom: 10px;
        max-width: 80%;
        clear: both;
    }
    
    .system-message {
        width: 100%;
        text-align: center;
        margin: 10px 0;
    }
    
    .system-message .message-content {
        background-color: #f1f1f1;
        color: #666;
        display: inline-block;
        padding: 5px 10px;
        border-radius: 10px;
        font-size: 12px;
    }
    
    .user-message {
        float: right;
    }
    
    .user-message .message-content {
        background-color: #4FC3F7;
        color: white;
        border-radius: 15px 15px 0 15px;
    }
    
    .other-message {
        float: left;
    }
    
    .other-message .message-content {
        background-color: #e5e5ea;
        color: black;
        border-radius: 15px 15px 15px 0;
    }
    
    .message-content {
        padding: 8px 12px;
        word-break: break-word;
    }
    
    .message-name {
        font-size: 12px;
        margin-bottom: 2px;
        color: #888;
    }
    
    .chat-input-area {
        display: flex;
        padding: 10px;
        border-top: 1px solid #eee;
    }
    
    .chat-input {
        flex: 1;
        padding: 8px;
        border: 1px solid #ddd;
        border-radius: 4px;
        outline: none;
    }
    
    .chat-send {
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 8px 15px;
        margin-left: 5px;
        cursor: pointer;
        font-weight: bold;
    }
    
    /* 聊天图标按钮，最小化状态时显示 */
    .chat-toggle-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: #4FC3F7;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        z-index: 999;
        display: none;
    }
    
    /* 响应式调整 */
    @media (max-width: 768px) {
        .chat-container {
            width: 250px;
            height: 350px;
            bottom: 10px;
            right: 10px;
        }
        
        .chat-container.minimized {
            height: 40px;
            width: 150px;
        }
        
        .chat-message {
            max-width: 90%;
        }
        
        /* 在小屏幕上，确保聊天框不会与游戏界面重叠 */
        .chat-container.conflict-mode {
            opacity: 0.8;
            transform: scale(0.8);
            transform-origin: bottom right;
            width: 200px;
        }
    }
    `;
    
    // 创建style元素并添加样式
    const styleElement = document.createElement('style');
    styleElement.type = 'text/css';
    styleElement.appendChild(document.createTextNode(chatStyles));
    document.head.appendChild(styleElement);
    
    // 将聊天框添加到DOM
    document.body.insertAdjacentHTML('beforeend', chatHtml);
    
    // 获取聊天框元素
    const chatContainer = document.getElementById('chat-container');
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const chatSend = document.getElementById('chat-send');
    const chatMinimize = document.getElementById('chat-minimize');
    const chatClose = document.getElementById('chat-close');
    const chatHeader = document.querySelector('.chat-header');
    
    // 用户随机ID和名称
    const userId = 'user_' + Math.random().toString(36).substr(2, 9);
    const randomNames = ['Guest', 'Player', 'Visitor'];
    const userName = randomNames[Math.floor(Math.random() * randomNames.length)] + Math.floor(Math.random() * 1000);
    
    // 存储聊天状态 (local storage)
    function saveChatState() {
        const chatState = {
            minimized: chatContainer.classList.contains('minimized'),
            closed: chatContainer.classList.contains('closed')
        };
        localStorage.setItem('chatState', JSON.stringify(chatState));
    }
    
    // 加载聊天状态
    function loadChatState() {
        const savedState = localStorage.getItem('chatState');
        if (savedState) {
            const chatState = JSON.parse(savedState);
            if (chatState.minimized) {
                chatContainer.classList.add('minimized');
                chatMinimize.textContent = '+';
            }
            if (chatState.closed) {
                chatContainer.classList.add('closed');
            }
        }
    }
    
    // 初始加载聊天状态
    loadChatState();
    
    // 聊天框最小化按钮功能
    chatMinimize.addEventListener('click', function(e) {
        e.stopPropagation(); // 防止事件冒泡到header
        chatContainer.classList.toggle('minimized');
        chatMinimize.textContent = chatContainer.classList.contains('minimized') ? '+' : '—';
        saveChatState();
    });
    
    // 聊天框关闭按钮功能 (隐藏)
    chatClose.addEventListener('click', function(e) {
        e.stopPropagation(); // 防止事件冒泡到header
        chatContainer.classList.add('closed');
        saveChatState();
        
        // 30秒后自动显示
        setTimeout(function() {
            chatContainer.classList.remove('closed');
            saveChatState();
        }, 30000);
    });
    
    // 点击标题栏也可以最小化/展开
    chatHeader.addEventListener('click', function() {
        if (!chatContainer.classList.contains('minimized')) {
            chatContainer.classList.add('minimized');
            chatMinimize.textContent = '+';
        } else {
            chatContainer.classList.remove('minimized');
            chatMinimize.textContent = '—';
        }
        saveChatState();
    });
    
    // 发送消息功能
    function sendMessage() {
        const messageText = chatInput.value.trim();
        if (messageText) {
            addMessage(messageText, 'user', userName);
            chatInput.value = '';
            
            // 这里可以添加发送到服务器的逻辑 (如果有)
            
            // 滚动到最新消息
            scrollToBottom();
            
            // 模拟其他用户回复 (随机)
            simulateResponse();
        }
    }
    
    // 发送按钮点击事件
    chatSend.addEventListener('click', sendMessage);
    
    // 输入框回车事件
    chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
    
    // 添加消息到聊天窗口
    function addMessage(text, type, name) {
        const messageHtml = `
        <div class="chat-message ${type}-message">
            ${type !== 'system' ? `<div class="message-name">${name}</div>` : ''}
            <div class="message-content">${text}</div>
        </div>
        `;
        chatMessages.insertAdjacentHTML('beforeend', messageHtml);
        
        // 存储消息到localStorage (仅保存最近20条)
        saveMessage({
            text: text,
            type: type,
            name: name,
            time: new Date().getTime()
        });
    }
    
    // 滚动到最新消息
    function scrollToBottom() {
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // 存储消息到localStorage
    function saveMessage(message) {
        let messages = JSON.parse(localStorage.getItem('chatMessages') || '[]');
        messages.push(message);
        // 只保留最近20条
        if (messages.length > 20) {
            messages = messages.slice(messages.length - 20);
        }
        localStorage.setItem('chatMessages', JSON.stringify(messages));
    }
    
    // 加载历史消息
    function loadMessages() {
        const messages = JSON.parse(localStorage.getItem('chatMessages') || '[]');
        messages.forEach(msg => {
            addMessage(msg.text, msg.type, msg.name);
        });
        scrollToBottom();
    }
    
    // 加载历史消息
    loadMessages();
    
    // 模拟其他用户响应 (随机)
    function simulateResponse() {
        if (Math.random() < 0.3) { // 30%几率有人回复
            const randomResponses = [
                'Nice game, I really like it!',
                'Does anyone know how to unlock the next level?',
                'I almost broke the record just now!',
                'This game is harder than I expected.',
                'Any tips or strategies to share?',
                'Hello everyone!',
                'Great day for gaming!',
                'I just got the highest score!',
                'Does anyone know any cheat codes for this game?',
                'The games on this site are really good!'
            ];
            const randomNames = ['Mike', 'GameMaster', 'Newbie', 'Passerby', 'OldTimer', 'GameFan'];
            const randomName = randomNames[Math.floor(Math.random() * randomNames.length)] + Math.floor(Math.random() * 1000);
            const randomResponse = randomResponses[Math.floor(Math.random() * randomResponses.length)];
            
            setTimeout(function() {
                addMessage(randomResponse, 'other', randomName);
                scrollToBottom();
            }, 1000 + Math.random() * 3000); // 1-4秒后回复
        }
    }
    
    // 检测游戏界面和聊天框的位置关系，避免遮挡
    function checkPositionConflict() {
        // 获取游戏iframe的位置和尺寸
        const gameContainer = document.querySelector('.game-container');
        if (!gameContainer) return;
        
        const gameFrame = gameContainer.querySelector('iframe');
        if (!gameFrame) return;
        
        const gameRect = gameFrame.getBoundingClientRect();
        const chatRect = chatContainer.getBoundingClientRect();
        
        // 检查是否有重叠
        const hasOverlap = !(
            chatRect.left > gameRect.right || 
            chatRect.right < gameRect.left || 
            chatRect.top > gameRect.bottom || 
            chatRect.bottom < gameRect.top
        );
        
        // 小屏幕下可能会有重叠
        if (window.innerWidth <= 768) {
            // 如果有重叠，添加特殊样式以避免遮挡
            if (hasOverlap) {
                chatContainer.classList.add('conflict-mode');
                // 如果还没最小化，则自动最小化
                if (!chatContainer.classList.contains('minimized')) {
                    chatContainer.classList.add('minimized');
                    chatMinimize.textContent = '+';
                    saveChatState();
                }
            } else {
                chatContainer.classList.remove('conflict-mode');
            }
        }
    }
    
    // 页面加载和窗口大小改变时检测位置关系
    window.addEventListener('resize', checkPositionConflict);
    window.addEventListener('load', checkPositionConflict);
    // 定期检查位置关系
    setInterval(checkPositionConflict, 2000);
    
    // 初始检查一次
    setTimeout(checkPositionConflict, 1000);
}); 
